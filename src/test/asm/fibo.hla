((
	based on http://dada.perl.it/shootout/fibo.html
))

((	Morty:

	def fib (n--f) :n
		n 2 lt [ 1 ret ] if
		n 2 sub fib (f2)
		n 1 sub fib (f2 f1) add (f)
	end
	
	32 fib vminfo
))

((	C: idea for compilation
	
	void fib(int n, int *out) {
		int s0,s1,s2;
		s0 = n;
		s1 = 2;
		s0 = s0<s1 ? 1:0;
		if (s0) {
			s0 = 1;
			out[0] = s0;
			return;
		}
		s0 = n;
		s1 = 2;
		s0 = s0 - s1;
		fib(s0,out);
		s0 = out[0];
		s1 = n;
		s2 = 1;
		s1 = s1 - s2;
		fib(s1,out);
		s1 = out[0];
		s0 = s0 + s1;
		out[0] = s0;
	}
))

0 jz.@start


fib: (n--f) stor
	( vget.1  2   lt    0 jz.@[  1 ret qret push.@] if  (32: 160ms) (38: 2888ms)
	( vget.1  2   lt    goto.@[  1 ret qret push.@] if  (32: 160ms) (38: 2888ms)
	( vget.1  2   lt  lambda.@[  1 ret qret  ]: if      (32: 140ms) (38: 2190ms)
	vget.1  2   lt      jz.@[  1 ret qret  ]:           (32: 125ms) (38: 1964ms)
	vget.1  2  sub  call.@fib
	vget.1  1  sub  call.@fib add
ret

start:

	38 call.@fib vminfo
